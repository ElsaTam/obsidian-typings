import builtins from 'builtin-modules';
import {
    context,
    type Plugin
} from 'esbuild';
import { existsSync } from 'node:fs';
import { join } from 'node:path/posix';
import { exit } from 'node:process';

async function main(): Promise<void> {
    await build('cjs');
    await build('esm');
    exit(0);
}

async function build(format: 'cjs' | 'esm'): Promise<void> {
    const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/
`;

    const buildContext = await context({
        banner: {
            js: banner
        },
        entryPoints: ['src/obsidian/implementations/index.ts'],
        bundle: true,
        external: [
            'obsidian',
            'electron',
            '@codemirror/autocomplete',
            '@codemirror/collab',
            '@codemirror/commands',
            '@codemirror/language',
            '@codemirror/lint',
            '@codemirror/search',
            '@codemirror/state',
            '@codemirror/view',
            '@lezer/common',
            '@lezer/highlight',
            '@lezer/lr',
            ...builtins
        ],
        format,
        target: 'ESNext',
        logLevel: 'info',
        sourcemap: 'inline',
        treeShaking: true,
        outfile: `dist/${format}/implementations.${format === 'cjs' ? 'cjs' : 'mjs'}`,
        plugins: [
            typescriptResolutionPlugin()
        ]
    });

    await buildContext.rebuild();
}

function typescriptResolutionPlugin(): Plugin {
    return {
        name: 'typescript-resolution',
        setup(build) {
            build.onResolve({ filter: /\.js$/ }, args => {
                const extensions = ['.ts', '.d.ts'];
                for (const ext of extensions) {
                    const fullPath = join(args.resolveDir.replace(/\\/g, '/'), args.path.replace('.js', ext));
                    if (existsSync(fullPath)) {
                        return { path: fullPath };
                    }
                }
                return null;
            });
        }
    };
}

await main();
